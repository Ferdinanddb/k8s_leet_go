apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-k8s-leet-go-asynq
  namespace: "{{ .Release.Namespace }}"
  labels:
    component: asynq-worker
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
spec:
  replicas: {{ .Values.asynq_worker.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "k8s-leet-go.name" . }}-asynq
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "k8s-leet-go.name" . }}-asynq
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: "ksa-k8s-leet-go-asynq"
      initContainers:
        - name: init-asynq
          image: busybox:1.28
          command: ['sh', '-c', 'sleep 60']
      containers:
        - name: {{ .Chart.Name }}-asynq
          image: "{{ .Values.asynq_worker.image.repository }}:{{ .Values.asynq_worker.image.tag }}"
          imagePullPolicy: {{ .Values.asynq_worker.image.pullPolicy }}
          ports:
            - name: svc-asynq-app
              containerPort: 8080
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: service-app
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: service-app
          env:
            - name: PGPASSWORD
              value: "{{ .Values.postgresql.auth.password }}"

            - name: DB_HOST
              value: "{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local"
            - name: DB_USER
              value: "{{ .Values.postgresql.auth.username }}"
            - name: DB_NAME
              value: "{{ .Values.postgresql.auth.database }}"
            - name: DB_PORT
              value: "{{ .Values.postgresql.containerPorts.postgresql }}"

            - name: REDIS_HOST
              value: "{{ .Release.Name }}-redis-cluster.{{ .Release.Namespace }}.svc.cluster.local"
            - name: REDIS_PORT
              value: "{{ index .Values "redis-cluster" "cluster" "externalAccess" "service" "port" }}"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-redis-cluster
                  key: redis-password
                  optional: false
          
          resources: {}
